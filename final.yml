AWSTemplateFormatVersion: "2010-09-09"
Description: Create a Lambda function to invoke a Lambda function attached to.
Resources:
  Function1LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: leadgen-api-litter-LambdaConfigRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - arn:aws:logs:*:*:log-group:/aws/lambda/*
              Effect: Allow
            - Action:
              - kms:Decrypt
              Resource:
              - arn:aws:kms:us-west-2:605024828399:key/451af827-153b-4cce-bb48-9a05dd377ba3
              Effect: Allow
            - Action:
              - secretsmanager:GetSecretValue
              Resource:
              - arn:aws:secretsmanager:us-west-2:605024828399:secret:development2/information-technology/edma-lead-api-dev2-ul7QKN
              Effect: Allow
            - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              Resource:
              - arn:aws:s3:::kirby-landing-dev2/retail/sensitive/zendesk/raw/zendeskappflow/*
              Effect: Allow
            - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
              Resource: 
              - !GetAtt SQSQueue1.Arn
              - !GetAtt SQSQueue2.Arn
              - !GetAtt SQSQueue3.Arn
              - !GetAtt SQSQueue4.Arn
              Effect: Allow
            - Action:
              - sqs:SendMessage
              Resource: 
              - arn:aws:sqs:us-west-2:605024828399:edma_lead_snowutil_logging_queue_litter
              Effect: Allow
            - Action: 
              - dynamodb:*
              Resource: "*"
              Effect: Allow

  Function2LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: leadgen-api-litter-LambdaCountRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - arn:aws:logs:*:*:log-group:/aws/lambda/*
              Effect: Allow
            - Action:
              - kms:Decrypt
              Resource:
              - arn:aws:kms:us-west-2:605024828399:key/451af827-153b-4cce-bb48-9a05dd377ba3
              Effect: Allow
            - Action:
              - secretsmanager:GetSecretValue
              Resource:
              - arn:aws:secretsmanager:us-west-2:605024828399:secret:development2/information-technology/edma-lead-api-dev2-ul7QKN
              Effect: Allow
            - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              Resource:
              - arn:aws:s3:::kirby-landing-dev2/retail/sensitive/zendesk/raw/zendeskappflow/*
              Effect: Allow
            - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
              Resource: 
              - !GetAtt SQSQueue1.Arn
              - !GetAtt SQSQueue2.Arn
              - !GetAtt SQSQueue3.Arn
              - !GetAtt SQSQueue4.Arn
              Effect: Allow
            - Action:
              - sqs:SendMessage
              Resource: 
              - arn:aws:sqs:us-west-2:605024828399:edma_lead_snowutil_logging_queue_litter
              Effect: Allow
            - Action: 
              - dynamodb:*
              Resource: "*"
              Effect: Allow

  Function3LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: leadgen-api-litter-LambdaDataEventRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - arn:aws:logs:*:*:log-group:/aws/lambda/*
              Effect: Allow
            - Action:
              - kms:Decrypt
              Resource:
              - arn:aws:kms:us-west-2:605024828399:key/451af827-153b-4cce-bb48-9a05dd377ba3
              Effect: Allow
            - Action:
              - secretsmanager:GetSecretValue
              Resource:
              - arn:aws:secretsmanager:us-west-2:605024828399:secret:development2/information-technology/edma-lead-api-dev2-ul7QKN
              Effect: Allow
            - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              Resource:
              - arn:aws:s3:::kirby-landing-dev2/retail/sensitive/zendesk/raw/zendeskappflow/*
              Effect: Allow
            - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
              Resource: 
              - !GetAtt SQSQueue1.Arn
              - !GetAtt SQSQueue2.Arn
              - !GetAtt SQSQueue3.Arn
              - !GetAtt SQSQueue4.Arn
              Effect: Allow
            - Action:
              - sqs:SendMessage
              Resource: 
              - !GetAtt SQSQueue5.Arn
              - !GetAtt SQSQueue6.Arn
              Effect: Allow
            - Action: 
              - dynamodb:*
              Resource: "*"
              Effect: Allow

  Function4LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: leadgen-api-litter-LambdaCompareEventRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - arn:aws:logs:*:*:log-group:/aws/lambda/*
              Effect: Allow
            - Action:
              - kms:Decrypt
              Resource:
              - arn:aws:kms:us-west-2:605024828399:key/451af827-153b-4cce-bb48-9a05dd377ba3
              Effect: Allow
            - Action:
              - secretsmanager:GetSecretValue
              Resource:
              - arn:aws:secretsmanager:us-west-2:605024828399:secret:development2/information-technology/edma-lead-api-dev2-ul7QKN
              Effect: Allow
            - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              Resource:
              - arn:aws:s3:::kirby-landing-dev2/retail/sensitive/zendesk/raw/zendeskappflow/*
              Effect: Allow
            - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
              Resource: 
              - !GetAtt SQSQueue1.Arn
              - !GetAtt SQSQueue2.Arn
              - !GetAtt SQSQueue3.Arn
              - !GetAtt SQSQueue4.Arn
              Effect: Allow
            - Action:
              - sqs:SendMessage
              Resource: 
              - !GetAtt SQSQueue5.Arn
              - !GetAtt SQSQueue6.Arn
              Effect: Allow
            - Action: 
              - dynamodb:*
              Resource: "*"
              Effect: Allow

  # LambdaPolicies:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     Policies:
  #       - PolicyName: LambdaAccessPolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #           - Action:
  #             - ec2:CreateNetworkInterface
  #             - ec2:DescribeNetworkInterfaces
  #             - ec2:DeleteNetworkInterface
  #             Resource:
  #             - "*"
  #             Effect: Allow
  #           - Action:
  #             - xray:PutTraceSegments
  #             - xray:PutTelemetryRecords
  #             Resource:
  #             - "*"
  #             Effect: Allow
  #           - Action:
  #             - logs:CreateLogGroup
  #             - logs:CreateLogStream
  #             - logs:PutLogEvents
  #             Resource:
  #             - arn:aws:logs:*:*:log-group:/aws/lambda/*
  #             Effect: Allow
  #           - Action:
  #             - kms:Decrypt
  #             Resource:
  #             - arn:aws:kms:us-west-2:605024828399:key/451af827-153b-4cce-bb48-9a05dd377ba3
  #             Effect: Allow
  #           - Action:
  #             - secretsmanager:GetSecretValue
  #             Resource:
  #             - arn:aws:secretsmanager:us-west-2:605024828399:secret:development2/information-technology/edma-lead-api-dev2-ul7QKN
  #             Effect: Allow
  #           - Action:
  #             - s3:PutObject
  #             - s3:GetObject
  #             - s3:DeleteObject
  #             Resource:
  #             - arn:aws:s3:::kirby-landing-dev2/retail/sensitive/zendesk/raw/zendeskappflow/*
  #             Effect: Allow
  #           - Action:
  #             - sqs:DeleteMessage
  #             - sqs:GetQueueAttributes
  #             - sqs:ReceiveMessage
  #             Resource: !GetAtt SQSQueue1.Arn
  #             Effect: Allow
  #           - Action:
  #             - sqs:SendMessage
  #             # - sqs:SendMessageBatch
  #             Resource: 
  #             - !GetAtt SQSQueue2.Arn
  #             - !GetAtt SQSQueue3.Arn
  #             - !GetAtt SQSQueue4.Arn
  #             Effect: Allow
  #           - Action:
  #             - sqs:SendMessage
  #             # - sqs:SendMessageBatch
  #             Resource: 
  #             - arn:aws:sqs:us-west-2:605024828399:edma_lead_snowutil_logging_queue_litter
  #     
  #             Effect: Allow
  #         Roles:
  #           - !Ref Function1LambdaExecutionRole
  #           - !Ref Function2LambdaExecutionRole
  #           - !Ref Function3LambdaExecutionRole
  #           - !Ref Function4LambdaExecutionRole
  Function5LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: leadgen-api-litter-LambdaSnowutilLoggingRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - arn:aws:logs:*:*:log-group:/aws/lambda/*
              Effect: Allow
            - Action:
              - kms:Decrypt
              Resource:
              - arn:aws:kms:us-west-2:605024828399:key/451af827-153b-4cce-bb48-9a05dd377ba3
              Effect: Allow
            - Action:
              - secretsmanager:GetSecretValue
              Resource:
              - arn:aws:secretsmanager:us-west-2:605024828399:secret:development2/information-technology/edma-lead-api-dev2-ul7QKN
              Effect: Allow
            - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              Resource:
              - arn:aws:s3:::kirby-landing-dev2/retail/sensitive/zendesk/raw/zendeskappflow/*
              Effect: Allow
            - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
              Resource: 
              - !GetAtt SQSQueue1.Arn
              - !GetAtt SQSQueue2.Arn
              - !GetAtt SQSQueue3.Arn
              - !GetAtt SQSQueue4.Arn
              Effect: Allow
            - Action:
              - sqs:SendMessage
              Resource: 
              - !GetAtt SQSQueue5.Arn
              - !GetAtt SQSQueue6.Arn
              Effect: Allow
            - Action: 
              - dynamodb:*
              Resource: "*"
              Effect: Allow

  Function6LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: leadgen-api-litter-LambdaSnowutilDloaderRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Resource:
              - "*"
              Effect: Allow
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - arn:aws:logs:*:*:log-group:/aws/lambda/*
              Effect: Allow
            - Action:
              - kms:Decrypt
              Resource:
              - arn:aws:kms:us-west-2:605024828399:key/451af827-153b-4cce-bb48-9a05dd377ba3
              Effect: Allow
            - Action:
              - secretsmanager:GetSecretValue
              Resource:
              - arn:aws:secretsmanager:us-west-2:605024828399:secret:development2/information-technology/edma-lead-api-dev2-ul7QKN
              Effect: Allow
            - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              Resource:
              - arn:aws:s3:::kirby-landing-dev2/retail/sensitive/zendesk/raw/zendeskappflow/*
              Effect: Allow
            - Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
              Resource: 
              - !GetAtt SQSQueue1.Arn
              - !GetAtt SQSQueue2.Arn
              - !GetAtt SQSQueue3.Arn
              - !GetAtt SQSQueue4.Arn
              Effect: Allow
            - Action:
              - sqs:SendMessage
              Resource: 
              - !GetAtt SQSQueue5.Arn
              - !GetAtt SQSQueue6.Arn
              Effect: Allow
            - Action: 
              - dynamodb:*
              Resource: "*"
              Effect: Allow

  Function1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return "Hello from Lambda!"
      Environment:
        Variables:
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: 'true'
          SECRET_NAME: development2/information-technology/edma-lead-api-dev2
          ENVIRONMENT: development2
          NEW_RELIC_SERVERLESS_MODE_ENABLED: 'true'
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: '399786'
          ENV: dev2
          QUEUE_URL: "https://sqs.us-west-2.amazonaws.com/605024828399/leadgen-count-event-listener-queue-litter"
      Description: leadgen api config event listener litter
      FunctionName: leadgen_config_event_listener_litter
      Handler: leadgen_config_event_listener_litter.lambda_handler
      MemorySize: 3008
      Role: !GetAtt Function1LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 900
      Architectures:
      - x86_64
      TracingConfig:
        Mode: Active
      EphemeralStorage:
        Size: 512
      VpcConfig:
        SubnetIds:
        - subnet-0e73f7538875096a3
        - subnet-01c89947835823d06
        SecurityGroupIds:
        - sg-0155a805a541c517e
      Tags:
        - Key: "owner"
          Value: "enggsnowflake@pnmac.com"
        - Key: "role"
          Value: "lambda"
        - Key: "nppi"
          Value: ""
        - Key: "project"
          Value: "directlendinghubs-leaddata"
        - Key: "division"
          Value: "information-technology"
        - Key: "environment"
          Value: "development2"
        - Key: "lambda:createdBy"
          Value: "SAM"
        - Key: "application"
          Value: "edma-lead-api"
        - Key: "name"
          Value: "edma-lead-api-dev2"
        - Key: "department"
          Value: "enterprise-data"
        - Key: "sox"
          Value: ""

  Function2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return "Hello from Lambda!"
      Environment:
        Variables:
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: 'true'
          SECRET_NAME: development2/information-technology/edma-lead-api-dev2
          COMPARE_QUEUE: https://sqs.us-west-2.amazonaws.com/605024828399/leadgen-compare-event-listener-queue-litter"
          LOGGING_QUEUE: "https://sqs.us-west-2.amazonaws.com/605024828399/leadgen_snowutil_logging_queue_litter"
          ENVIRONMENT: development2
          NEW_RELIC_SERVERLESS_MODE_ENABLED: 'true'
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: '399786'
          ENV: dev2
          DATA_QUEUE: "https://sqs.us-west-2.amazonaws.com/605024828399/leadgen-data-event-listener-queue-litter"
      FunctionName: leadgen_count_event_listener_litter
      Runtime: python3.8
      Role: !GetAtt Function2LambdaExecutionRole.Arn
      Handler: leadgen_count_event_listener_litter.lambda_handler      
      Description: leadgen api count event listener litter
      Timeout: 900
      MemorySize: 3008
      Architectures:
      - x86_64
      TracingConfig:
        Mode: Active
      EphemeralStorage:
        Size: 512
      VpcConfig:
        SubnetIds:
        - subnet-0e73f7538875096a3
        - subnet-01c89947835823d06
        SecurityGroupIds:
        - sg-0155a805a541c517e
      Tags:
        - Key: "owner"
          Value: "enggsnowflake@pnmac.com"
        - Key: "role"
          Value: "lambda"
        - Key: "nppi"
          Value: ""
        - Key: "project"
          Value: "directlendinghubs-leaddata"
        - Key: "division"
          Value: "information-technology"
        - Key: "environment"
          Value: "development2"
        - Key: "lambda:createdBy"
          Value: "SAM"
        - Key: "application"
          Value: "edma-lead-api"
        - Key: "name"
          Value: "edma-lead-api-dev2"
        - Key: "department"
          Value: "enterprise-data"
        - Key: "sox"
          Value: ""

  Function3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return "Hello from Lambda!"
      Environment:
        Variables:
          S3_BUCKET: kirby-landing-dev2
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: 'true'
          SECRET_NAME: development2/information-technology/edma-lead-api-dev2
          ENVIRONMENT: development2
          NEW_RELIC_SERVERLESS_MODE_ENABLED: 'true'
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: '399786'
          ENV: dev2
      FunctionName: leadgen_data_event_listener_litter
      Runtime: python3.8
      Role: !GetAtt Function3LambdaExecutionRole.Arn
      Handler: leadgen_data_event_listener_litter.lambda_handler      
      Description: leadgen api event listener litter
      Timeout: 900
      MemorySize: 3008  
      Architectures:
      - x86_64
      TracingConfig:
        Mode: Active
      EphemeralStorage:
        Size: 512
      VpcConfig:
        SubnetIds:
        - subnet-0e73f7538875096a3
        - subnet-01c89947835823d06
        SecurityGroupIds:
        - sg-0155a805a541c517e
      Tags:
        - Key: "owner"
          Value: "enggsnowflake@pnmac.com"
        - Key: "role"
          Value: "lambda"
        - Key: "nppi"
          Value: ""
        - Key: "project"
          Value: "directlendinghubs-leaddata"
        - Key: "division"
          Value: "information-technology"
        - Key: "environment"
          Value: "development2"
        - Key: "lambda:createdBy"
          Value: "SAM"
        - Key: "application"
          Value: "edma-lead-api"
        - Key: "name"
          Value: "edma-lead-api-dev2"
        - Key: "department"
          Value: "enterprise-data"
        - Key: "sox"
          Value: ""

  Function4:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return "Hello from Lambda!"
      Environment:
        Variables:
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: 'true'
          DLOADER_QUEUE: "https://sqs.us-west-2.amazonaws.com/605024828399/leadgen_snowutil_dloader_queue_litter"
          SECRET_NAME: development2/information-technology/edma-lead-api-dev2
          LOGGING_QUEUE: "https://sqs.us-west-2.amazonaws.com/605024828399/leadgen_snowutil_logging_queue_litter"
          ENVIRONMENT: development2
          NEW_RELIC_SERVERLESS_MODE_ENABLED: 'true'
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: '399786'
          ENV: dev2
      FunctionName: leadgen_compare_event_listener_litter
      Runtime: python3.8
      Role: !GetAtt Function4LambdaExecutionRole.Arn
      Handler: leadgen_compare_event_listener_litter.lambda_handler      
      Description: leadgen api compare event listener litter
      Timeout: 900
      MemorySize: 3008
      Architectures:
      - x86_64
      TracingConfig:
        Mode: Active
      EphemeralStorage:
        Size: 512
      VpcConfig:
        SubnetIds:
        - subnet-0e73f7538875096a3
        - subnet-01c89947835823d06
        SecurityGroupIds:
        - sg-0155a805a541c517e
      Tags:
        - Key: "owner"
          Value: "enggsnowflake@pnmac.com"
        - Key: "role"
          Value: "lambda"
        - Key: "nppi"
          Value: ""
        - Key: "project"
          Value: "directlendinghubs-leaddata"
        - Key: "division"
          Value: "information-technology"
        - Key: "environment"
          Value: "development2"
        - Key: "lambda:createdBy"
          Value: "SAM"
        - Key: "application"
          Value: "edma-lead-api"
        - Key: "name"
          Value: "edma-lead-api-dev2"
        - Key: "department"
          Value: "enterprise-data"
        - Key: "sox"
          Value: ""

  Function5:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return "Hello from Lambda!"
      Environment:
        Variables:
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: 'true'
          SECRET_NAME: development2/information-technology/edma-lead-api-dev2
          ENVIRONMENT: development2
          NEW_RELIC_SERVERLESS_MODE_ENABLED: 'true'
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: '399786'
          EMAIL_TO: enggsnowflake@pnmac.com
          ENV: dev2
          EMAIL_FROM: donotreply-cc@pnmac.com
      FunctionName: leadgen_snowutil_logging_litter
      Runtime: python3.8
      Role: !GetAtt Function5LambdaExecutionRole.Arn
      Handler: leadgen_snowutil_logging_litter.lambda_handler
      Description: leadgen api snowutil logging litter
      Timeout: 900
      MemorySize: 3008
      Architectures:
      - x86_64
      TracingConfig:
        Mode: Active
      EphemeralStorage:
        Size: 512
      VpcConfig:
        SubnetIds:
        - subnet-0e73f7538875096a3
        - subnet-01c89947835823d06
        SecurityGroupIds:
        - sg-0155a805a541c517e
      Tags:
        - Key: "owner"
          Value: "enggsnowflake@pnmac.com"
        - Key: "role"
          Value: "lambda"
        - Key: "nppi"
          Value: ""
        - Key: "project"
          Value: "directlendinghubs-leaddata"
        - Key: "division"
          Value: "information-technology"
        - Key: "environment"
          Value: "development2"
        - Key: "lambda:createdBy"
          Value: "SAM"
        - Key: "application"
          Value: "edma-lead-api"
        - Key: "name"
          Value: "edma-lead-api-dev2"
        - Key: "department"
          Value: "enterprise-data"
        - Key: "sox"
          Value: ""

  Function6:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return "Hello from Lambda!"
      Environment:
        Variables:
          NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: 'true'
          SECRET_NAME: development2/information-technology/edma-lead-api-dev2
          ENVIRONMENT: development2
          NEW_RELIC_SERVERLESS_MODE_ENABLED: 'true'
          LOGGING_QUEUE_URL: ""
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: '399786'
          ENV: dev2
      FunctionName: leadgen_snowutil_dloader_litter
      Role: !GetAtt Function6LambdaExecutionRole.Arn
      Handler: leadgen_snowutil_dloader_litter.lambda_handler
      Description: leadgen api snowutil dloader litter
      Timeout: 900
      MemorySize: 3008
      Runtime: python3.8
      VpcConfig:
        SubnetIds:
        - subnet-0e73f7538875096a3
        - subnet-01c89947835823d06
        SecurityGroupIds:
        - sg-0155a805a541c517e
      Architectures:
      - x86_64
      TracingConfig:
        Mode: Active
      EphemeralStorage:
        Size: 512
      Tags:
        - Key: "owner"
          Value: "enggsnowflake@pnmac.com"
        - Key: "role"
          Value: "lambda"
        - Key: "nppi"
          Value: ""
        - Key: "project"
          Value: "directlendinghubs-leaddata"
        - Key: "division"
          Value: "information-technology"
        - Key: "environment"
          Value: "development2"
        - Key: "lambda:createdBy"
          Value: "SAM"
        - Key: "application"
          Value: "edma-lead-api"
        - Key: "name"
          Value: "edma-lead-api-dev2"
        - Key: "department"
          Value: "enterprise-data"
        - Key: "sox"
          Value: ""
  
  LambdaFunctionEventSourceMapping1:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue1.Arn
      FunctionName: !GetAtt Function1.Arn

  LambdaFunctionEventSourceMapping2:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue2.Arn
      FunctionName: !GetAtt Function2.Arn
  
  LambdaFunctionEventSourceMapping3:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue3.Arn
      FunctionName: !GetAtt Function3.Arn
  
  LambdaFunctionEventSourceMapping4:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue4.Arn
      FunctionName: !GetAtt Function4.Arn
  
  LambdaFunctionEventSourceMapping5:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue5.Arn
      FunctionName: !GetAtt Function5.Arn
  
  LambdaFunctionEventSourceMapping6:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue6.Arn
      FunctionName: !GetAtt Function6.Arn

  SQSQueue1: 
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: '1800'
      QueueName: leadgen-config-event-listener-queue-litter
      RedrivePolicy: 
        deadLetterTargetArn: !Sub ${DLQ1.Arn}
        maxReceiveCount: 10
  SQSQueue2: 
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: '1800'
      QueueName: leadgen-count-event-listener-queue-litter
      RedrivePolicy: 
        deadLetterTargetArn: !Sub ${DLQ2.Arn}
        maxReceiveCount: 10
  SQSQueue3:
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: '1800'
      QueueName: leadgen-data-event-listener-queue-litter
      RedrivePolicy: 
        deadLetterTargetArn: !Sub ${DLQ3.Arn}
        maxReceiveCount: 10  
  SQSQueue4: 
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: '1800'
      QueueName: leadgen-compare-event-listener-queue-litter
      RedrivePolicy: 
        deadLetterTargetArn: !Sub ${DLQ4.Arn}
        maxReceiveCount: 10
  SQSQueue5:
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: '1800'
      QueueName: leadgen-snowutil_logging_queue_litter
      RedrivePolicy: 
        deadLetterTargetArn: !Sub ${DLQ5.Arn}
        maxReceiveCount: 10  
  SQSQueue6:
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: '1800'
      QueueName: leadgen-snowutil_dloader_litter
      RedrivePolicy: 
        deadLetterTargetArn: !Sub ${DLQ6.Arn}
        maxReceiveCount: 10  
  
  DLQ1: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: leadgen-config-event-listener-dlq-litter
  DLQ2: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: leadgen-count-event-listener-dlq-litter
  DLQ3: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: leadgen-data-event-listener-dlq-litter 
  DLQ4: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: leadgen-compare-event-listener-dlq-litter
  DLQ5: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: leadgen-snowutil-logging-dlq-litter
  DLQ6: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: leadgen-snowutil-dloader-dlq-litter
